
I don't see any source! This probably means you have not added/committed new files, or that you have had problems syncing/pushing your code to the "origin" remote.

I will look here to run your code:

https://github.com/kit-transue/select-vehicle-roboto
Links to an external site.

Note this is different from a GitHub Codespace: the Codespace is an insulated environment that I cannot see.

Standard support offer stands: happy to Zoom, troubleshoot based on email descriptions or screenshots, etc.

If troubleshooting on your own: 

check "git status" from shell
look at the VSCode Version Control tab for status
if the Commit button is grayed and a small "wait" marker going back and forth, check the open editor tabs for a "Git wants you to write a commit log message here" window.
Kit Transue , Oct 20 at 7:26am
Note that I do see one commit:

commit 04c438d

Oct 19 20:56:15 2024 +0000

Group By Color/State

 

It has an empty "vrt.session.sql" (this is the file SQLTools makes for you to facilitate exploring SQL with). It feels like the commit was not fully staged. If you are working from the command line, make sure you "git add" the files to get them to the staging area. If using the VSCode interface, watch for files tagged "U" (Untracked: not introduced to/managed by Git.)

(Note above date is GMT; commit was around 2pm PDT Saturday. That was the time the commit was constructed; I do not have access to when it was pushed to our shared origin.)

Kit Transue , Oct 20 at 7:33am
It looks like on November 1, you used the GitHub interface to snapshot some Codespace files that had not been previously committed. These got put on a branch:

codespace-zany-xylophone-r444jq7wrp9g3xg4

 

The files on this branch that are different from the starting point are:

 

Ferrari.sql
UseReg
distinct.sql
group-by.sql
makeyears.sql
new-idea.sql
sample.sql
vrt.session.sql

 

(Note the main branch is still the October 19 commit 04c438d.)

There's a lot of good work on this branch; I will give feedback on the codespace-recovered files above.

Kit Transue , Dec 12 at 10:23am
UseReg: This is a very simple scan of DISTINCT "use" values. The file should be given a ".sql" extension so VSCode knows how to work with it (text completion; cmd-/ to toggle comments, and most importantly: to connect to the SQLTools extension to make it easy to send the code to the database server).

UseReg is a simple and very effective query. Nice.

 

distinct.sql: well...same code as in UseReg, but with the right extension. See above comments; ignore the extension bit. ;)

 

group_by.sql: SELECT color, state, COUNT(*) AS total_cars
FROM registration
GROUP BY color, state;

The syntax here is correct for a count, and it's a good exercise in grouping by *two* columns (which can be useful). This query gets to be long: it's 64 rows on the sample extract, and produces 1263 rows on the full data set. I'm not sure what kind of story it tells--but that's only secondary to the exercise. Sorted by total and run on the full database, the most popular colors are disappointingly boring. But the least popular are entertaining colors in faraway places:

       color       | state | total_cars 
-------------------+-------+------------
                   | WA    |   12145243
 WHITE             | WA    |    3622807
 BLACK             | WA    |    2847311
 ALUMINUM / SILVER | WA    |    2820790
 GRAY              | WA    |    2473020

...

 PURPLE            | NM    |          1
                   | LND   |          1
 GREEN,DARK        | AL    |          1
 ORANGE            | ND    |          1
 BEIGE             | MS    |          1
 MULTICOLOR        | AP    |          1
 CREAM / IVORY     | CO    |          1
 GOLD              | AE    |          1
 ORANGE            | BC    |          1
 WHITE             | AA    |          1
 BRONZE            | MA    |          1
 BRONZE            | KS    |          1
 LAVENDER          | AK    |          1
 ALUMINUM / SILVER | BCN   |          1
(1263 rows)

Nice query structure. Yay.

 

makeyears.sql: Similar to the above; potential for good stories with an ORDER BY and LIMIT? Output is getting long and is unordered in this query as-written.

 

Ferrari.sql:
SELECT color, COUNT(*) AS count
FROM registration
WHERE make = 'Ferrari'
GROUP BY color
ORDER BY count DESC;

This produces zero results, despite my promise that there are Ferraris in the database (100 of them, in fact). It is also your only query that attempts a WHERE filter, so you don't have a lot of experience to help you know how confidently to treat your code.

For this query, your syntax is great. The WHERE is simply not matching any rows. You are looking at the correct column ("make"). So...?

Look at your output from makeyears.sql. (Or you can write a DISTINCT query to make this easier.) The first few lines of this are:

SELECT myear, make, COUNT(*) AS total_cars
FROM registration
GROUP BY myear, make LIMIT 10;
 myear |   make   | total_cars 
-------+----------+------------
  1994 | HONDA    |          1
  2003 | NISSAN   |          5
  2013 | INFINITI |          4
  2012 | HYUNDAI  |         15
  2012 | BUICK    |          2
  2018 | HYUNDAI  |         18
  2005 | LEXUS    |          9
  2004 | TOYOTA   |         48
  2020 | FORD     |         35
  2000 | GMC      |          7
(10 rows)

No Ferraris appear in this list, but it might give you a hint as to why

  WHERE make = 'Ferrari'

does not match any rows.

 

For full credit, please do two things in this order:

(1) Change makeyears.sql so it counts only motorcycles. Add only a WHERE clause to the existing query. Your distinct.sql query should be very helpful in deciding how to write the filter expression for motorcycles:

=== distinct.sql ===
SELECT DISTINCT use
FROM registration;
        use        
-------------------
 Truck
 Passenger Vehicle
 Motorcycle
(3 rows)

 

(2) Fix the literal in the WHERE clause in Ferrari.sql so it documents the 100 Ferraris. If you need to, use "SELECT DISTINCT make FROM registration;" to research the database.

 

For 10 points extra credit, please look at the columns in the database and imagine a query/story that could be told from some of those columns.

 

Email me if you have any 